#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ax18

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: [started]
    
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  DIY_SH: scripts/diy-ax18.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: Ubuntu-22.04
#     if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get -qq install libfuse-dev
        sudo timedatectl set-timezone "$TZ"
        sudo chmod 777 /mnt

    - name: Clone source code
      working-directory: /mnt
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H<br/>")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: File Diy Patch
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH
    
    - name: Update feeds again
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Generate configuration file
      run: |
        cd openwrt
        rm -f ./.config*
        touch ./.config

        #
        # ========================固件定制部分========================
        # 

        # 
        # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
        # 

        # 以下为定制化固件选项和说明:
        #

        #
        # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
        # 
        #          =========================================
        #         |  # 取消编译VMware镜像:                   |
        #         |  cat >> .config <<EOF                   |
        #         |  # CONFIG_VMDK_IMAGES is not set        |
        #         |  EOF                                    |
        #          =========================================
        #

        # 
        # 以下是一些提前准备好的一些插件选项.
        # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
        # 如果不需要代码块里的某一项配置, 只需要删除相应行.
        #
        # 如果需要其他插件, 请按照示例自行添加.
        # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
        # 
        # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
        # 

        # 编译CMIOT-AX18固件:
        cat >> .config <<EOF
        CONFIG_TARGET_qualcommax=y
        CONFIG_TARGET_qualcommax_ipq60xx=y
        CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_cmiot_ax18=y
        CONFIG_DEFAULT_ath11k-firmware-ipq6018=y
        CONFIG_DEFAULT_autocore-arm=y
        CONFIG_DEFAULT_base-files=y
        CONFIG_DEFAULT_block-mount=y
        CONFIG_DEFAULT_busybox=y
        CONFIG_DEFAULT_ca-bundle=y
        CONFIG_DEFAULT_ca-certificates=y
        CONFIG_DEFAULT_coremark=y
        CONFIG_DEFAULT_curl=y
        CONFIG_DEFAULT_ddns-scripts_aliyun=y
        CONFIG_DEFAULT_ddns-scripts_dnspod=y
        CONFIG_DEFAULT_default-settings=y
        CONFIG_DEFAULT_dnsmasq-full=y
        CONFIG_DEFAULT_dropbear=y
        CONFIG_DEFAULT_e2fsprogs=y
        CONFIG_DEFAULT_firewall=y
        CONFIG_DEFAULT_fstools=y
        CONFIG_DEFAULT_ip-full=y
        CONFIG_DEFAULT_ipset=y
        CONFIG_DEFAULT_iptables=y
        CONFIG_DEFAULT_iptables-mod-extra=y
        CONFIG_DEFAULT_iptables-mod-tproxy=y
        CONFIG_DEFAULT_iwinfo=y
        CONFIG_DEFAULT_kmod-ath11k-ahb=y
        CONFIG_DEFAULT_kmod-fs-ext4=y
        CONFIG_DEFAULT_kmod-gpio-button-hotplug=y
        CONFIG_DEFAULT_kmod-ipt-raw=y
        CONFIG_DEFAULT_kmod-leds-gpio=y
        CONFIG_DEFAULT_kmod-nf-nathelper=y
        CONFIG_DEFAULT_kmod-nf-nathelper-extra=y
        CONFIG_DEFAULT_kmod-qca-nss-dp=y
        CONFIG_DEFAULT_kmod-qca-nss-drv=y
        CONFIG_DEFAULT_kmod-qca-nss-drv-bridge-mgr=y
        CONFIG_DEFAULT_kmod-qca-nss-drv-pppoe=y
        CONFIG_DEFAULT_kmod-qca-nss-drv-vlan=y
        CONFIG_DEFAULT_kmod-qca-nss-ecm=y
        CONFIG_DEFAULT_kmod-qca-ssdk=y
        CONFIG_DEFAULT_kmod-tun=y
        CONFIG_DEFAULT_kmod-usb-dwc3=y
        CONFIG_DEFAULT_kmod-usb-dwc3-qcom=y
        CONFIG_DEFAULT_kmod-usb3=y
        CONFIG_DEFAULT_libc=y
        CONFIG_DEFAULT_libgcc=y
        CONFIG_DEFAULT_libustream-openssl=y
        CONFIG_DEFAULT_logd=y
        CONFIG_DEFAULT_losetup=y
        CONFIG_DEFAULT_luci=y
        CONFIG_DEFAULT_luci-app-accesscontrol=y
        CONFIG_DEFAULT_luci-app-arpbind=y
        CONFIG_DEFAULT_luci-app-autoreboot=y
        CONFIG_DEFAULT_luci-app-ddns=y
        CONFIG_DEFAULT_luci-app-filetransfer=y
        CONFIG_DEFAULT_luci-app-nlbwmon=y
        CONFIG_DEFAULT_luci-app-ssr-plus=y
        CONFIG_DEFAULT_luci-app-turboacc=y
        CONFIG_DEFAULT_luci-app-upnp=y
        # CONFIG_DEFAULT_luci-app-vlmcsd is not set
        CONFIG_DEFAULT_luci-app-vsftpd=y
        CONFIG_DEFAULT_luci-app-wol=y
        CONFIG_DEFAULT_luci-proto-ipv6=y
        CONFIG_DEFAULT_mtd=y
        CONFIG_DEFAULT_netifd=y
        CONFIG_DEFAULT_nss-firmware-ipq6018=y
        CONFIG_DEFAULT_odhcp6c=y
        CONFIG_DEFAULT_odhcpd-ipv6only=y
        CONFIG_DEFAULT_opkg=y
        CONFIG_DEFAULT_ppp=y
        CONFIG_DEFAULT_ppp-mod-pppoe=y
        CONFIG_DEFAULT_procd=y
        CONFIG_DEFAULT_procd-ujail=y
        CONFIG_DEFAULT_uboot-envtools=y
        CONFIG_DEFAULT_uci=y
        CONFIG_DEFAULT_uclient-fetch=y
        CONFIG_DEFAULT_urandom-seed=y
        CONFIG_DEFAULT_urngd=y
        CONFIG_DEFAULT_wpad-openssl=y
        CONFIG_HAS_FPU=y
        CONFIG_AUDIO_SUPPORT=y
        CONFIG_GPIO_SUPPORT=y
        CONFIG_PCI_SUPPORT=y
        CONFIG_PCIE_SUPPORT=y
        CONFIG_USB_SUPPORT=y
        CONFIG_RTC_SUPPORT=y
        CONFIG_USES_DEVICETREE=y
        CONFIG_USES_INITRAMFS=y
        CONFIG_USES_SQUASHFS=y
        CONFIG_EMMC_SUPPORT=y
        CONFIG_NAND_SUPPORT=y
        CONFIG_ARCH_64BIT=y
        CONFIG_VIRTIO_SUPPORT=y
        CONFIG_aarch64=y
        CONFIG_ARCH="aarch64"
        EOF

        # IPv6支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        CONFIG_PACKAGE_ip6tables=y
        CONFIG_PACKAGE_ip6tables-extra=y
        CONFIG_PACKAGE_ip6tables-mod-nat=y
        CONFIG_PACKAGE_ipv6helper=y
        EOF

        # LuCI插件选择:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-app-accesscontrol=y
        CONFIG_PACKAGE_luci-app-argon-config=y
        CONFIG_PACKAGE_luci-app-arpbind=y
        CONFIG_PACKAGE_luci-app-autoreboot=y
        CONFIG_PACKAGE_luci-app-cpufreq=y
        CONFIG_PACKAGE_luci-app-ddns=y
        CONFIG_PACKAGE_luci-app-filetransfer=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_luci-app-nlbwmon=y
        CONFIG_PACKAGE_luci-app-openclash=y
        CONFIG_PACKAGE_luci-app-ramfree=y
        CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=y
        CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=y
        CONFIG_PACKAGE_luci-app-smartdns=y
        CONFIG_PACKAGE_luci-app-ssr-plus=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_libustream-openssl=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ChinaDNS_NG=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Simple_Obfs=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
        CONFIG_PACKAGE_luci-app-ttyd=y
        CONFIG_PACKAGE_luci-app-turboacc=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_OFFLOADING=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_BBR_CCA=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_PDNSD=y
        EOF

        # LuCI主题:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-argon=y
        CONFIG_PACKAGE_luci-app-argon-config=y
        CONFIG_PACKAGE_luci-theme-design=y
        EOF

        # 常用软件包:
        cat >> .config <<EOF
        # CONFIG_PACKAGE_luci-app-unblockmusic is net set
        EOF

        # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
        # cat >> .config <<EOF
        # # CONFIG_TARGET_IMAGES_PAD is not set
        # # CONFIG_VMDK_IMAGES is not set
        # EOF

        # 
        # ========================固件定制部分结束========================
        # 

        sed -i 's/^[ \t]*//g' ./.config
        make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"

    - name: Calculate MD5
      run: |
        cd ${{ env.FIRMWARE }} && rm -rf sha256sums
        MD5=$(md5sum * | sed ':a;N;$!ba;s/\n/<br>/g')
        echo "MD5=$MD5" >> $GITHUB_ENV

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload OpenWrt Firmware to Release
      id: release
      uses: ncipollo/release-action@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: R${{ steps.organize.outputs.release_tag }} for CMIOT-AX18
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ steps.organize.outputs.release_tag }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          - 默认IP：192.168.3.1
          - 默认密码：password
          - 当前使用版本:【编译前的最后一次[➦主源码](${{ env.REPO_URL }})更新记录】
          - 下载后请仔细校验MD5，如不正确请重新下载
          ${{ env.useVersionInfo }}
          
          `md5sum`
          > ${{ env.MD5 }}

    #- name: Delete workflow runs
    #  uses: GitRML/delete-workflow-runs@main
    #  with:
    #    retain_days: 1
    #    keep_minimum_runs: 5

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
